
<!DOCTYPE html>
<html>
<head>
<meta charset=utf-8 />
<title>Getter Test</title>
<style>
body{
	background-color:white;
	}
</style>
</head>
<body>

<script>
(function(){
	var n = navigator,
    		w = window, 
    		s = screen;
    var nav_props = ['appCodeName', 'appName', 'appVersion', 'buildID', 'cookieEnabled', 'doNotTrack', 'geolocation', 
                                                               'language', 'mimeTypes', 'onLine', 'platform', 
                                                               'plugins', 'product', 'productSub', 'userAgent', 
                                                               'vendor', 'vendorSub', 'javaEnabled', 'cpuClass', 
                                                               'oscpu', 'systemLanguage', 'userLanguage', 
                                                               'browserLanguage', 'appMinorVersion', 'securityPolicy',
                                                               'getStorageUpdates', 'registerProtocolHandler', 'webkitGetGamepads','webkitGetUserMedia'];
    var screen_props = ['availHeight'];
                                                             
    document.write('<table><tr><th>Property</th><th>Value</th></tr>');
    
    function add_line(value, title){
		document.write('<tr><td>' + title + '</td><td>' +  value +'</td></tr>');
	}		
	
	function list_object_props(obj, objName, prop_list){
		var title, prop, prop_idx, func_ret, prop_value;
		for(prop_idx in prop_list){
			prop = prop_list[prop_idx];
			prop_value = obj[prop];
			title = objName + '.' + prop;
			if (typeof prop_value == 'function'){
				try{
					func_ret = prop_value.apply(obj, []);
					add_line(func_ret, title);
				}catch(e){
					add_line('Undefined!', title);
				}
			}else if (typeof prop_value == 'object'){
				add_line(prop_value, title);
			}else{
				add_line(prop_value, title);
			}
		}
		
		
	}
	function list_navigator_props(){
		var p, plugin;
		for (p = 0; p < n.plugins.length; p++){ 
			plugin = n.plugins[p];
			add_line(plugin.name + '|' + plugin.description + '|' + plugin.filename + '|' + plugin.length, 'Plugin '+p);
		}
		
		for (p = 0; p < n.mimeTypes.length; p++){ 
			add_line(n.mimeTypes[p].type + '|' + n.mimeTypes[p].description + '|' + n.mimeTypes[p].suffixes + '|' + n.mimeTypes[p].enabledPlugin, 'MimeType '+p);
		}
		 //list_object_props(n, 'navigator', nav_props);
	}
	
	function probe_activeX(){		
		//if (typeof (ActiveXObject) == "function") {
			  for (var f = 8; f > 0; f--) {
				try {
					var d = "PDF.PdfCtrl." + f.toFixed(0);
					var b = new ActiveXObject(d);
					add_line('True', d);
				} catch (g) {
					add_line('False', d);
				}
			  }
		 /*}*/
	}
	
	function list_window_fp_props(){
		probe_activeX();
	}

	list_navigator_props();
	list_object_props(s, 'screen', screen_props);
	list_window_fp_props();
	document.write('</table>');

	
})();
     
</script>
  
</body>
</html>

